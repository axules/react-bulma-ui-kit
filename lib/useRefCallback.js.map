{"version":3,"file":"useRefCallback.js","names":["_react","require","useRefCallback","initValue","onChange","main","useMemo","value","ref","current","prevValue"],"sources":["../src/useRefCallback.js"],"sourcesContent":["import { useMemo } from 'react';\n\n/**\n * Returns ref, calls `onChange` once `ref.current` is changed.\n * Do nothing if you change something in deep of current (e.g `ref.current.value = 100;`).\n * @param {any?} initValue Initialize value. Could be null or undefined\n * @param {Function} onChange Callback which will be called once `ref.current` is changed. Function(value, prevValue)\n * @returns {Object} { current }\n * @example\n * const ref = useRefCallback(10, (val, prevVal) => console.log(prevValue, ' to ', value));\n * ref.current += 20;\n * // prints '10 to 30'\n */\nexport function useRefCallback(initValue, onChange) {\n  const main = useMemo(\n    () => ({\n      value: initValue,\n      ref: {\n        get current() {\n          return main.value;\n        },\n        set current(value) {\n          if (main.value !== value) {\n            const prevValue = main.value;\n            main.value = value;\n            onChange(value, prevValue);\n          }\n        },\n      }\n    }),\n    // we need to create this main object only once - when component is initializing\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return main.ref;\n}"],"mappings":";;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,cAAcA,CAACC,SAAS,EAAEC,QAAQ,EAAE;EAClD,MAAMC,IAAI,GAAG,IAAAC,cAAO,EAClB,OAAO;IACLC,KAAK,EAAEJ,SAAS;IAChBK,GAAG,EAAE;MACH,IAAIC,OAAOA,CAAA,EAAG;QACZ,OAAOJ,IAAI,CAACE,KAAK;MACnB,CAAC;MACD,IAAIE,OAAOA,CAACF,KAAK,EAAE;QACjB,IAAIF,IAAI,CAACE,KAAK,KAAKA,KAAK,EAAE;UACxB,MAAMG,SAAS,GAAGL,IAAI,CAACE,KAAK;UAC5BF,IAAI,CAACE,KAAK,GAAGA,KAAK;UAClBH,QAAQ,CAACG,KAAK,EAAEG,SAAS,CAAC;QAC5B;MACF;IACF;EACF,CAAC,CAAC;EACF;EACA;EACA,EACF,CAAC;EAED,OAAOL,IAAI,CAACG,GAAG;AACjB","ignoreList":[]}