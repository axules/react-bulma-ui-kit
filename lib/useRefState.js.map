{"version":3,"file":"useRefState.js","names":["_react","require","useRefState","initValue","value","setValue","useState","useMemo","current","newValue"],"sources":["../src/useRefState.js"],"sourcesContent":["import {\n  useMemo,\n  useState\n} from 'react';\n\n\n/**\n * Keeps ref value in state. Needs to force rendering when ref is changed.\n * It provides possibility to use `useEffect` for ref.\n * @param {any?} initValue Initial value\n * @returns {Object} `{ current }`. NEW OBJECT after ref value changes.\n * @example\n * const ref = useRefState(1);\n * useEffect(() => {\n *  console.log('REF IS CHANGED', ref.current);\n * }, [ref.current]);\n * const onClick = () => ref.current += 1;\n * // once onClick is called, then it will initiate state update,\n * // and new `ref` object will be created during new rendering cycle.\n */\nexport function useRefState(initValue) {\n  const [value, setValue] = useState(initValue);\n\n  return useMemo(\n    () => ({\n      get current() {\n        return value;\n      },\n      set current(newValue) {\n        if (value !== newValue) {\n          setValue(newValue);\n        }\n      },\n    }),\n    [value],\n  );\n}"],"mappings":";;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,WAAWA,CAACC,SAAS,EAAE;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG,IAAAC,eAAQ,EAACH,SAAS,CAAC;EAE7C,OAAO,IAAAI,cAAO,EACZ,OAAO;IACL,IAAIC,OAAOA,CAAA,EAAG;MACZ,OAAOJ,KAAK;IACd,CAAC;IACD,IAAII,OAAOA,CAACC,QAAQ,EAAE;MACpB,IAAIL,KAAK,KAAKK,QAAQ,EAAE;QACtBJ,QAAQ,CAACI,QAAQ,CAAC;MACpB;IACF;EACF,CAAC,CAAC,EACF,CAACL,KAAK,CACR,CAAC;AACH","ignoreList":[]}