{"version":3,"file":"useStaticCallback.js","names":["_react","require","useStaticCallback","handler","handlerRef","useRef","current","useCallback","arguments"],"sources":["../src/useStaticCallback.js"],"sourcesContent":["import {\n  useCallback,\n  useRef,\n} from 'react';\n\n/**\n * Returns static function which never changes (during component re-render), but will call actual code always.\n * It is like `useCallback` but you do not need to pass the second argument.\n *\n * @param {function} handler any handler\n * @returns {Function} Immutable function, which never changes. If you call this function\n * then it calls the LAST passed `handler.\n * @example\n * const { saveValue, multiplier } = props;\n * const [value, setValue] = useState('');\n * const onClick = useStaticCallback(() => {\n *  saveValue(value * multiplier);\n * });\n * // instead of\n * const onClick = useCallback(() => {\n *  saveValue(value * multiplier);\n * }, [saveValue, multiplier]);\n */\nexport function useStaticCallback(handler) {\n  const handlerRef = useRef(handler);\n\n  handlerRef.current = handler;\n\n  return useCallback(\n    (...args) => handlerRef.current(...args),\n    [],\n  );\n}\n"],"mappings":";;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,iBAAiBA,CAACC,OAAO,EAAE;EACzC,MAAMC,UAAU,GAAG,IAAAC,aAAM,EAACF,OAAO,CAAC;EAElCC,UAAU,CAACE,OAAO,GAAGH,OAAO;EAE5B,OAAO,IAAAI,kBAAW,EAChB;IAAA,OAAaH,UAAU,CAACE,OAAO,CAAC,GAAAE,SAAO,CAAC;EAAA,GACxC,EACF,CAAC;AACH","ignoreList":[]}