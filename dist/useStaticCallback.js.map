{"version":3,"file":"useStaticCallback.js","names":["_react","require","useStaticCallback","handler","handlerRef","useRef","current","useCallback","arguments"],"sources":["../src/useStaticCallback.js"],"sourcesContent":["import {\r\n  useCallback,\r\n  useRef,\r\n} from 'react';\r\n\r\n/**\r\n * Returns static function which never changes (during component re-render).\r\n * @param {Function} handler\r\n * @returns {Function} Immutable function, which never changes. If you call this function\r\n * then it calls the LAST passed `handler.\r\n * @example\r\n * const { saveValue } = props;\r\n * const [value, setValue] = useState('');\r\n * const onClick = useStaticCallback(() => {\r\n *  saveValue(value);\r\n * });\r\n */\r\nexport function useStaticCallback(handler) {\r\n  const handlerRef = useRef(handler);\r\n\r\n  handlerRef.current = handler;\r\n\r\n  return useCallback(\r\n    (...args) => handlerRef.current(...args),\r\n    [],\r\n  );\r\n}\r\n"],"mappings":";;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,iBAAiBA,CAACC,OAAO,EAAE;EACzC,MAAMC,UAAU,GAAG,IAAAC,aAAM,EAACF,OAAO,CAAC;EAElCC,UAAU,CAACE,OAAO,GAAGH,OAAO;EAE5B,OAAO,IAAAI,kBAAW,EAChB;IAAA,OAAaH,UAAU,CAACE,OAAO,CAAC,GAAAE,SAAO,CAAC;EAAA,GACxC,EACF,CAAC;AACH","ignoreList":[]}